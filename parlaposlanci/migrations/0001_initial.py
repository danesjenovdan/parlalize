# Generated by Django 1.11 on 2019-10-18 15:02
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AverageNumberOfSpeechesPerSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of activity', null=True, verbose_name='date of analize')),
                ('score', models.FloatField(blank=True, help_text='MP score', null=True)),
                ('average', models.FloatField(blank=True, help_text='Average score', null=True)),
                ('maximum', models.FloatField(blank=True, help_text='Maximum score', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CutVotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('this_for', models.FloatField()),
                ('this_against', models.FloatField()),
                ('this_abstain', models.FloatField()),
                ('this_absent', models.FloatField()),
                ('coalition_for', models.FloatField()),
                ('coalition_against', models.FloatField()),
                ('coalition_abstain', models.FloatField()),
                ('coalition_absent', models.FloatField()),
                ('coalition_for_max', models.FloatField()),
                ('coalition_against_max', models.FloatField()),
                ('coalition_abstain_max', models.FloatField()),
                ('coalition_absent_max', models.FloatField()),
                ('coalition_for_max_person', models.CharField(max_length=500)),
                ('coalition_against_max_person', models.CharField(max_length=500)),
                ('coalition_abstain_max_person', models.CharField(max_length=500)),
                ('coalition_absent_max_person', models.CharField(max_length=500)),
                ('opposition_for', models.FloatField()),
                ('opposition_against', models.FloatField()),
                ('opposition_abstain', models.FloatField()),
                ('opposition_absent', models.FloatField()),
                ('opposition_for_max', models.FloatField()),
                ('opposition_against_max', models.FloatField()),
                ('opposition_abstain_max', models.FloatField()),
                ('opposition_absent_max', models.FloatField()),
                ('opposition_for_max_person', models.CharField(max_length=500)),
                ('opposition_against_max_person', models.CharField(max_length=500)),
                ('opposition_abstain_max_person', models.CharField(max_length=500)),
                ('opposition_absent_max_person', models.CharField(max_length=500)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_parladata', models.IntegerField(blank=True, db_index=True, help_text='id parladata', null=True, verbose_name='parladata id')),
                ('name', models.CharField(help_text='District name', max_length=128, null=True, verbose_name='name of district')),
            ],
        ),
        migrations.CreateModel(
            name='EqualVoters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of activity', null=True, verbose_name='date of actanalizeivity')),
                ('votes1', models.FloatField(blank=True, help_text='EqualVoters', null=True, verbose_name='EqualVoters1')),
                ('votes2', models.FloatField(blank=True, help_text='EqualVoters', null=True, verbose_name='EqualVoters2')),
                ('votes3', models.FloatField(blank=True, help_text='EqualVoters', null=True, verbose_name='EqualVoters3')),
                ('votes4', models.FloatField(blank=True, help_text='EqualVoters', null=True, verbose_name='EqualVoters4')),
                ('votes5', models.FloatField(blank=True, help_text='EqualVoters', null=True, verbose_name='EqualVoters5')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LastActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('session_id', models.TextField(blank=True, help_text='type of activity', null=True, verbose_name='type of activity')),
                ('vote_name', models.TextField(blank=True, help_text='type of activity', null=True, verbose_name='type of activity')),
                ('typee', models.TextField(blank=True, help_text='type of activity', null=True, verbose_name='type of activity')),
                ('activity_id', models.TextField(blank=True, help_text='type of activity', null=True, verbose_name='type of activity')),
                ('option', models.TextField(blank=True, help_text='type of activity', null=True, verbose_name='type of activity')),
                ('result', models.TextField(blank=True, help_text='type of activity', null=True, verbose_name='type of activity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LessEqualVoters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of activity', null=True, verbose_name='date of analize')),
                ('votes1', models.FloatField(blank=True, help_text='EqualVoters', null=True, verbose_name='EqualVoters1')),
                ('votes2', models.FloatField(blank=True, help_text='EqualVoters', null=True, verbose_name='EqualVoters2')),
                ('votes3', models.FloatField(blank=True, help_text='EqualVoters', null=True, verbose_name='EqualVoters3')),
                ('votes4', models.FloatField(blank=True, help_text='EqualVoters', null=True, verbose_name='EqualVoters4')),
                ('votes5', models.FloatField(blank=True, help_text='EqualVoters', null=True, verbose_name='EqualVoters5')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MembershipsOfMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('data', jsonfield.fields.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MembersList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('data', jsonfield.fields.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MinisterStatic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('age', models.IntegerField(blank=True, help_text="Person's age.", null=True)),
                ('acronym', models.TextField(blank=True, help_text="Parliament group's acronym", null=True)),
                ('education', models.TextField(blank=True, help_text="Person's education", null=True)),
                ('previous_occupation', models.TextField(blank=True, help_text="Person's previous occupation", null=True)),
                ('name', models.TextField(blank=True, help_text='Name', null=True)),
                ('district', jsonfield.fields.JSONField(blank=True, help_text='Voting district name.', null=True)),
                ('facebook', models.TextField(blank=True, default=None, help_text='Facebook profile URL', null=True)),
                ('twitter', models.TextField(blank=True, default=None, help_text='Twitter profile URL', null=True)),
                ('linkedin', models.TextField(blank=True, default=None, help_text='Linkedin profile URL', null=True)),
                ('party_name', models.TextField(blank=True, help_text='Party name', null=True)),
                ('gov_id', models.CharField(help_text='The ID of the official on the government website.', max_length=128, null=True, verbose_name='gov id')),
                ('gender', models.CharField(default=b'f', help_text='Gender', max_length=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MismatchOfPG',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('data', models.FloatField(blank=True, help_text='Percentage of the same vote as his parlimentary group', null=True, verbose_name='Percentage of the same vote as his parlimentary group')),
                ('average', models.FloatField(blank=True, help_text='Average score', null=True)),
                ('maximum', models.FloatField(blank=True, help_text='Maximum score', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MPStaticGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('groupid', models.IntegerField()),
                ('groupname', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MPStaticPL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('voters', models.IntegerField(blank=True, help_text='Number of voters', null=True)),
                ('points', models.IntegerField(blank=True, help_text='Number of points', null=True)),
                ('age', models.IntegerField(blank=True, help_text="Person's age.", null=True)),
                ('birth_date', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('mandates', models.IntegerField(blank=True, help_text='Number of mandates', null=True)),
                ('acronym', models.TextField(blank=True, help_text="Parliament group's acronym", null=True)),
                ('education', models.TextField(blank=True, help_text="Person's education", null=True)),
                ('education_level', models.TextField(blank=True, help_text="Person's education level", null=True)),
                ('previous_occupation', models.TextField(blank=True, help_text="Person's previous occupation", null=True)),
                ('name', models.TextField(blank=True, help_text='Name', null=True)),
                ('district', jsonfield.fields.JSONField(blank=True, help_text='Voting district name.', null=True)),
                ('facebook', models.TextField(blank=True, default=None, help_text='Facebook profile URL', null=True)),
                ('twitter', models.TextField(blank=True, default=None, help_text='Twitter profile URL', null=True)),
                ('linkedin', models.TextField(blank=True, default=None, help_text='Linkedin profile URL', null=True)),
                ('party_name', models.TextField(blank=True, help_text='Party name', null=True)),
                ('gov_id', models.CharField(help_text='The ID of the official on the government website.', max_length=128, null=True, verbose_name='gov id')),
                ('gender', models.CharField(default=b'f', help_text='Gender', max_length=1)),
                ('working_bodies_functions', jsonfield.fields.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MPsWhichFitsToPG',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NumberOfQuestions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('score', models.FloatField(blank=True, help_text='MP score', null=True)),
                ('average', models.FloatField(blank=True, help_text='Average score', null=True)),
                ('maximum', models.FloatField(blank=True, help_text='Maximum score', null=True)),
                ('maxMPs', jsonfield.fields.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NumberOfSpeechesPerSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('person_value', models.FloatField(blank=True, help_text='Number of speeches of this MP', null=True, verbose_name='Number of speeches of this MP')),
                ('average', models.FloatField(blank=True, help_text='Average of MP speeches per session', null=True, verbose_name='average')),
                ('maximum', models.FloatField(blank=True, help_text='Max of MP speeches per session', null=True, verbose_name='max')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('name', models.CharField(blank=True, help_text="A person's preferred full name", max_length=128, null=True, verbose_name='name')),
                ('pg', models.CharField(help_text='Parlament group of MP', max_length=128, null=True, verbose_name='parlament group')),
                ('id_parladata', models.IntegerField(blank=True, db_index=True, help_text='id parladata', null=True, verbose_name='parladata id')),
                ('image', models.URLField(blank=True, help_text='A URL of a head shot', null=True, verbose_name='image')),
                ('actived', models.CharField(help_text='Yes if MP is actived or no if it is not', max_length=128, null=True, verbose_name='actived')),
                ('gov_id', models.CharField(help_text='The ID of the official on the government website.', max_length=128, null=True, verbose_name='gov id')),
                ('has_function', models.BooleanField(default=False, help_text='True if is president or something special.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Presence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('person_value_sessions', models.FloatField(blank=True, help_text='Presence of this MP', null=True, verbose_name='Presence of this MP')),
                ('maxMP_sessions', jsonfield.fields.JSONField(blank=True, help_text='Person who has max presence of sessions', null=True)),
                ('average_sessions', models.FloatField(blank=True, help_text='Average of MP attended sessions', null=True, verbose_name='average')),
                ('maximum_sessions', models.FloatField(blank=True, help_text='Max of MP attended sessions', null=True, verbose_name='max')),
                ('person_value_votes', models.FloatField(blank=True, help_text='Presence of this MP', null=True, verbose_name='Presence of this MP')),
                ('maxMP_votes', jsonfield.fields.JSONField(blank=True, help_text='Person who has max presence of sessions', null=True)),
                ('average_votes', models.FloatField(blank=True, help_text='Average of MP attended sessions', null=True, verbose_name='average')),
                ('maximum_votes', models.FloatField(blank=True, help_text='Max of MP attended sessions', null=True, verbose_name='max')),
                ('person', models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='parlaposlanci.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PresenceThroughTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('data', jsonfield.fields.JSONField(blank=True, null=True)),
                ('person', models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpeakingStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('problematicno_score', models.IntegerField(help_text='Problematicno besedje score.')),
                ('privzdignjeno_score', models.IntegerField(help_text='Privzdignjeno besedje score.')),
                ('preprosto_score', models.IntegerField(help_text='Preprosto besedje score.')),
                ('problematicno_avg', models.IntegerField(help_text='Problematicno besedje average score.')),
                ('privzdignjeno_avg', models.IntegerField(help_text='Privzdignjeno besedje average score.')),
                ('preprosto_avg', models.IntegerField(help_text='Preprosto besedje average score.')),
                ('person', models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpokenWords',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('score', models.IntegerField(blank=True, help_text='SW of this MP', null=True, verbose_name='SW of this MP')),
                ('average', models.IntegerField(blank=True, help_text='Average of MP attended sessions', null=True, verbose_name='average')),
                ('maximum', models.IntegerField(blank=True, help_text='Max of MP attended sessions', null=True, verbose_name='max')),
                ('maxMP', models.ForeignKey(blank=True, help_text='Person who has max spoken words', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenSW_1', to='parlaposlanci.Person')),
                ('person', models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenSW', to='parlaposlanci.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StyleScores',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('problematicno', models.FloatField(blank=True, help_text='Problematicno score of this MP', null=True, verbose_name='Problematicno style score of this MP')),
                ('privzdignjeno', models.FloatField(blank=True, help_text='Privzdignjeno style score of this MP', null=True, verbose_name='Privzdignjeno style score of this MP')),
                ('preprosto', models.FloatField(blank=True, help_text='Preprosto style score of this MP', null=True, verbose_name='Preprosto style score of this MP')),
                ('problematicno_average', models.FloatField(blank=True, help_text='Problematicno average style score', null=True, verbose_name='Problematicno average style score')),
                ('privzdignjeno_average', models.FloatField(blank=True, help_text='Privzdignjeno average style score', null=True, verbose_name='Privzdignjeno average style score')),
                ('preprosto_average', models.FloatField(blank=True, help_text='Preprosto average style score', null=True, verbose_name='Preprosto average style score')),
                ('person', models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenStSc', to='parlaposlanci.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaggedBallots',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('data', jsonfield.fields.JSONField(blank=True, null=True)),
                ('person', models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tfidf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('is_visible', models.BooleanField(default=True, verbose_name='is visible')),
                ('data', jsonfield.fields.JSONField(blank=True, null=True)),
                ('person', models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VocabularySize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('score', models.FloatField(blank=True, help_text='Vacabularty size of this MP', null=True, verbose_name='Vacabularty size of this MP')),
                ('average', models.FloatField(blank=True, help_text='Vacabularty size of MP', null=True, verbose_name='average')),
                ('maximum', models.FloatField(blank=True, help_text='Max of MP vacabularty size ', null=True, verbose_name='max')),
                ('maxMP', models.ForeignKey(blank=True, help_text='Person who has max vacabularty size', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='maxVocabulary', to='parlaposlanci.Person')),
                ('person', models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='VocabularySizes', to='parlaposlanci.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VocabularySizeUniqueWords',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='creation time')),
                ('updated_at', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='last modification time')),
                ('created_for', models.DateField(blank=True, help_text='date of analize', null=True, verbose_name='date of activity')),
                ('score', models.FloatField(blank=True, help_text='Vacabularty size of this MP', null=True, verbose_name='Vacabularty size of this MP')),
                ('average', models.FloatField(blank=True, help_text='Vacabularty size of MP', null=True, verbose_name='average')),
                ('maximum', models.FloatField(blank=True, help_text='Max of MP vacabularty size ', null=True, verbose_name='max')),
                ('maxMP', models.ForeignKey(blank=True, help_text='Person who has max vacabularty size', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='maxUniqueWords', to='parlaposlanci.Person')),
                ('person', models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='uniqueWords', to='parlaposlanci.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='numberofspeechespersession',
            name='maxMP',
            field=models.ForeignKey(blank=True, help_text='Person who has max speeches per session', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenNOSPS', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='numberofspeechespersession',
            name='person',
            field=models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='speaker', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='numberofquestions',
            name='person',
            field=models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='mpswhichfitstopg',
            name='person',
            field=models.ForeignKey(blank=True, help_text='MP1', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenMPWPG', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='mpstaticpl',
            name='person',
            field=models.ForeignKey(help_text='Person foreign key relationship', on_delete=django.db.models.deletion.CASCADE, related_name='static_data', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='mpstaticgroup',
            name='person',
            field=models.ForeignKey(help_text='Person foreign key to MPStaticPL', on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.MPStaticPL'),
        ),
        migrations.AddField(
            model_name='mismatchofpg',
            name='maxMP',
            field=models.ForeignKey(blank=True, help_text='Person who has max mismatch of PG', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mismatches', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='mismatchofpg',
            name='person',
            field=models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='ministerstatic',
            name='person',
            field=models.ForeignKey(help_text='Person foreign key relationship', on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='membershipsofmember',
            name='person',
            field=models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='lessequalvoters',
            name='person',
            field=models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenLEWT', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='lessequalvoters',
            name='person1',
            field=models.ForeignKey(blank=True, help_text='MP1', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenLEW1', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='lessequalvoters',
            name='person2',
            field=models.ForeignKey(blank=True, help_text='MP2', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenLEW2', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='lessequalvoters',
            name='person3',
            field=models.ForeignKey(blank=True, help_text='MP3', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenLEW3', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='lessequalvoters',
            name='person4',
            field=models.ForeignKey(blank=True, help_text='MP4', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenLEW4', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='lessequalvoters',
            name='person5',
            field=models.ForeignKey(blank=True, help_text='MP5', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenLEW5', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='lastactivity',
            name='person',
            field=models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenLA', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='equalvoters',
            name='person',
            field=models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenEWT', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='equalvoters',
            name='person1',
            field=models.ForeignKey(blank=True, help_text='MP1', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenEW1', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='equalvoters',
            name='person2',
            field=models.ForeignKey(blank=True, help_text='MP2', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenEW2', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='equalvoters',
            name='person3',
            field=models.ForeignKey(blank=True, help_text='MP3', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenEW3', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='equalvoters',
            name='person4',
            field=models.ForeignKey(blank=True, help_text='MP4', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenEW4', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='equalvoters',
            name='person5',
            field=models.ForeignKey(blank=True, help_text='MP5', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childrenEW5', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='cutvotes',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='averagenumberofspeechespersession',
            name='maxMP',
            field=models.ForeignKey(blank=True, help_text='Maximum MP', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='max_person', to='parlaposlanci.Person'),
        ),
        migrations.AddField(
            model_name='averagenumberofspeechespersession',
            name='person',
            field=models.ForeignKey(blank=True, help_text='MP', null=True, on_delete=django.db.models.deletion.CASCADE, to='parlaposlanci.Person'),
        ),
    ]
